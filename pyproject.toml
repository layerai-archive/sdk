[tool.poetry]
name = "layer"
version = "0.10.0"
description = "Layer AI SDK"
authors = ["Layer <info@layer.ai>"]
readme = "README.md"
license = "Apache-2.0"

packages = [
    { include = "layer" },
]

[tool.poetry.dependencies]
python = ">=3.7.1,<3.11"
Jinja2  = ">=2.11.3"
aiohttp  = ">=3.7.3,<3.8.0"
boto3  = ">=1.16.24"
cloudpickle  = ">=2.0.0"
cryptography  = ">=3.4.7"
grpcio-tools = "1.45.0"
grpcio = "1.45.0"
humanize  = ">=3.11.0"
idna = "<3"
jsonschema = "3.1.1"
mlflow  = ">=1.25.0"
networkx  = ">=2.5"
packaging = "<=21.0"  # latest release (21.2) is causing version conflicts with pyparsing
pandas = "1.3.5"
Pillow = ">=9.1.0"
pickle5 = { version = "~0.0.11", python = "<3.8" }
polling  = ">=0.3.1"
prompt_toolkit  = ">=3.0.8"
protobuf  = ">=3.12.0"
pyarrow = "7.0.0"
pyjwt  = ">=1.7.1,<2.0.0"
rich = "~12.4.1"
transformers = "*"
validate-email = "1.3"
yarl  = ">=1.6.3"
wrapt  = ">=1.13.3"
layer-api = "0.9.359678"

[tool.poetry.dev-dependencies]
black = "22.3.0"
boto3-stubs = ">=1.23.4"
mypy = "0.950"
isort = "^5.10.1"
bandit = "^1.7.4"
pytest-cov = "^3.0.0"
flake8 = "^4.0.1"
ipdb = "^0.13.9"
pytest = "^7.1.2"
pytest-dotenv = "^0.5.2"
flake8-no-implicit-concat = "^0.3.3"
data-science-types = "0.2.23"
tensorflow = { version = "^2.8.0", markers = "platform_machine != 'arm64'" }
tensorflow-macos = { version = "^2.8.0", markers = "platform_machine == 'arm64'" }
catboost = "1.0.5"
keras = "2.8.0"
lightgbm = "3.3.2"
xgboost = "1.5.1"
scikit-learn = "1.0.2"
torch = "1.11.0"
grpc-stubs = "1.24.5"
grpcio = "1.45.0"
grpcio-tools = "1.45.0"
types-protobuf = "3.19.4"
types-setuptools = "57.4.0"
types-jwt = "0.1.3"
ddtrace = "0.60.0"
pandas-stubs = ">=1.2.0.58"
pytest-asyncio = "0.18.3"
pytest-timeout = "2.1.0"
matplotlib = "3.5.1"
yolov5 = "^6.1.2"
types-toml = "^0.10.7"
types-Pillow = "^9.0.15"
pytest-xdist = "^2.5.0"
pylint = "^2.13.9"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
    "test/*",
]

[tool.pylint.MASTER]
ignore-patterns=[ ".*pb2.py" , ".*pb2_grpc.p", ".*egg-info.*", ".*ini", ".*.gradle", "MANIFEST.in", ".*.md"]
max-line-length=120
load-plugins="pylint_django"
known-third-party="layer_client"
fail-on="I"
disable="all"
good-names-rgxs="^[_a-z][_a-z0-9]?$" # allow 1 or 2 character variables
# Taken from https://github.com/edx/edx-lint/blob/master/pylintrc with some modifications
enable = [
    "invalid-overridden-method",
    "arguments-out-of-order",
    "redeclared-assigned-name",
    "self-assigning-variable",
    "property-with-parameters",
    "class-variable-slots-conflict",
    "dict-iter-missing-items",
#   "no-else-raise",
    "comparison-with-callable",
    "unhashable-dict-key",
#   "raise-missing-from",
    "super-with-arguments",
    "useless-super-delegation",
    "useless-object-inheritance",
    "syntax-error",
    "init-is-generator",
    "return-in-init",
    "function-redefined",
    "not-in-loop",
    "return-outside-function",
    "yield-outside-function",
    "return-arg-in-generator",
    "nonexistent-operator",
    "duplicate-argument-name",
    "abstract-class-instantiated",
    "bad-reversed-sequence",
    "continue-in-finally",
    "method-hidden",
    "access-member-before-definition",
    "no-method-argument",
#   "no-self-argument",
    "invalid-slots-object",
    "assigning-non-slot",
    "invalid-slots",
    "inherit-non-class",
    "inconsistent-mro",
    "duplicate-bases",
    "non-iterator-returned",
    "unexpected-special-method-signature",
    "invalid-length-returned",
    "import-error",
    "used-before-assignment",
    "undefined-variable",
    "undefined-all-variable",
    "invalid-all-object",
#   "no-name-in-module",
    "unbalance-tuple-unpacking",
    "unpacking-non-sequence",
    "bad-except-order",
    "raising-bad-type",
    "misplaced-bare-raise",
    "raising-non-exception",
    "nonimplemented-raised",
    "catching-non-exception",
    "slots-on-old-class",
    "super-on-old-class",
    "bad-super-call",
    "missing-super-argument",
#   "no-member",
    "not-callable",
    "assignment-from-no-return",
    "no-value-for-parameter",
#   "too-many-function-args",
    "unexpected-keyword-arg",
    "redundant-keyword-arg",
    "invalid-sequence-index",
    "invalid-slice-index",
    "assignment-from-none",
    "not-context-manager",
    "invalid-unary-operand-type",
    "unsupported-binary-operation",
    "repeated-keyword",
    "not-an-iterable",
    "not-a-mapping",
    "unsupported-membership-test",
    "unsubscriptable-object",
    "logging-unsupported-format",
    "logging-too-many-args",
    "logging-too-few-args",
    "bad-format-character",
    "truncated-format-string",
    "mixed-fomat-string",
    "format-needs-mapping",
    "missing-format-string-key",
    "too-many-format-args",
    "too-few-format-args",
    "bad-str-strip-call",
    "model-unicode-not-callable",
    "super-method-not-called",
    "non-parent-method-called",
    "test-inherits-tests",
    "translation-of-non-string",
    "redefined-variable-type",
    "cyclical-import",
    "unreachable",
    "dangerous-default-value",
    "pointless-statement",
    "pointless-string-statement",
    "expression-not-assigned",
    "duplicate-key",
    "confusing-with-statement",
    "using-constant-test",
    "lost-exception",
    "assert-on-tuple",
    "attribute-defined-outside-init",
    "bad-staticmethod-argument",
    "arguments-differ",
    "signature-differs",
    "abstract-method",
    "super-init-not-called",
    "relative-import",
    "import-self",
    "misplaced-future",
    "invalid-encoded-data",
    "global-variable-undefined",
#   "redefined-outer-name",
#   "redefined-builtin",
    "redefined-in-handler",
    "undefined-loop-variable",
    "cell-var-from-loop",
    "duplicate-except",
    "nonstandard-exception",
    "binary-op-exception",
    "property-on-old-class",
    "bad-format-string-key",
    "unused-format-string-key",
    "bad-format-string",
    "missing-format-argument-key",
    "unused-format-string-argument",
    "format-combined-specification",
    "missing-format-attribute",
    "invalid-format-index",
    "anomalous-backslash-in-string",
    "anomalous-unicode-escape-in-string",
    "bad-open-mode",
    "boolean-datetime",
    "fatal",
    "astroid-error",
    "parse-error",
    "method-check-failed",
    "django-not-available",
    "raw-checker-failed",
    "django-not-available-placeholder",
#   "empty-docstring",
#   "invalid-characters-in-docstring",
#   "missing-docstring",
#   "wrong-spelling-in-comment",
#   "wrong-spelling-in-docstring",
    "unused-import",
    "unused-variable",
#   "unused-argument",
    "exec-used",
    "eval-used",
    "bad-classmethod-argument",
    "bad-mcs-classmethod-argument",
    "bad-mcs-method-argument",
    "bad-whitespace",
    "consider-iterating-dictionary",
    "consider-using-enumerate",
    "literal-used-as-attribute",
    "multiple-imports",
    "multiple-statements",
    "old-style-class",
    "simplifiable-range",
    "singleton-comparison",
    "superfluous-parens",
    "unidiomatic-typecheck",
    "unneeded-not",
    "wrong-assert-type",
    "simplifiable-if-statement",
    "no-classmethod-decorator",
    "no-staticmethod-decorator",
    "unnecessary-pass",
    "unnecessary-lambda",
    "useless-else-on-loop",
    "unnecessary-semicolon",
    "reimported",
    "global-variable-not-assigned",
    "global-at-module-level",
    "bare-except",
#   "broad-except",
    "logging-not-lazy",
    "redundant-unittest-assert",
    "model-missing-unicode",
    "model-has-unicode",
    "model-no-explicit-unicode",
    "protected-access",
    "deprecated-module",
    "deprecated-method",
#   "too-many-nested-blocks",
    "too-many-statements",
#   "too-many-boolean-expressions",
#   "wrong-import-order", # covered by isort
    "wrong-import-position",
#   "wildcard-import",
    "missing-final-newline",
    "mixed-line-endings",
    "trailing-newlines",
    "trailing-whitespace",
    "unexpected-line-ending-format",
    "mixed-indentation",
    "bad-option-value",
    "unrecognized-inline-option",
    "useless-suppression",
    "bad-inline-option",
    "deprecated-pragma",
    "invalid-name"
]

[tool.bandit]
exclude_dirs = [
    "test",
    ".eggs"
]
skips = [
    "B101", # assert_used
    "B105", # hardcoded_password_string too noisy on defaults values empty string
    "B106", # hardcoded_password_funcarg too noisy on defaults values empty string
]
